#pragma once
#include"cudaConf.h"
#include <cuda.h>
#include <cuda_runtime.h>

namespace curoy {
template<typename N> 
void multDev(const N* lhs, const N* rhs, N* result, size_t n, size_t k, size_t m);

template<typename N>
void transposeDev(const N* input, N* result, size_t nRows, size_t nCols);

template<typename N>
void fillDev(N* X, const N number, size_t numElements);

template<typename M,typename N>
void castDev(const M* X, N* result, size_t numElements);

/**
 * REDUCE Operation
 */
template<typename N>
N sumDev(const N* X, size_t length);

template<typename N>
N prodDev(const N* X, size_t length);

template<typename N>
N maxDev(const N* X, size_t length);

template<typename N>
N minDev(const N* X, size_t length);

/**
 * REDUCE Columnewise Operation
 */
template<typename N>
void sumColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void prodColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void maxColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void maxPosColumneDev(const N* X, N* result,size_t* position, size_t nRows, size_t nCols);

template<typename N>
void minColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void minPosColumneDev(const N* X, N* result,size_t* position, size_t nRows, size_t nCols);

/**
 * REDUCE Columnewise Operation
 */
template<typename N>
void sumColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void prodColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void maxColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void maxPosColumneDev(const N* X, N* result,size_t* position, size_t nRows, size_t nCols);

template<typename N>
void minColumneDev(const N* X, N* result, size_t nRows, size_t nCols);

template<typename N>
void minPosColumneDev(const N* X, N* result,size_t* position, size_t nRows, size_t nCols);
/**
 * ELEMENTWISE Operations
 */

template<typename N> 
void addDev(const N* lhs, const N* rhs, N* result, size_t numElements);

template<typename N> 
void subDev(const N* lhs, const N* rhs, N* result, size_t numElements);

template<typename N> 
void mulDev(const N* lhs, const N* rhs, N* result, size_t numElements);

template<typename N> 
void divDev(const N* lhs, const N* rhs, N* result, size_t numElements);

template<typename N>
void eqDev (const N* lhs, const N* rhs, N* result, size_t numElements);

template<typename N>
void neqDev(const N* lhs, const N* rhs, N* result, size_t numElements);
/**
 * SKALAR Operations
 */

template<typename N> 
void addSkalarDev(const N* lhs, const N rhs, N* result, size_t numElements);

template<typename N> 
void subSkalarDev(const N* lhs, const N rhs, N* result, size_t numElements);

template<typename N> 
void mulSkalarDev(const N* lhs, const N rhs, N* result, size_t numElements);

template<typename N> 
void divSkalarDev(const N* lhs, const N rhs, N* result, size_t numElements);

template<typename N> 
void divReverseSkalarDev(const N* rhs, const N lhs, N* result, size_t numElements);

template<typename N> 
void eqSkalarDev (const N* lhs, const N rhs, N* result, size_t numElements);

template<typename N>
void neqSkalarDev(const N* lhs, const N rhs, N* result, size_t numElements);
/**
 *	MATH functions
 */
template<typename N>
void powDev(const N* input, const N exponent,  N* result, size_t numElements);

template<typename N>
void expDev(const N* input, N* result, size_t numElements);

template<typename N>
void logDev(const N* input, N* result, size_t numElements);

template<typename N>
void log10Dev(const N* input, N* result, size_t numElements);
}
